(function(window){const defaultConfig={storageKey:"beacon_experiments",storageDuration:90,hashFunction:"fnv",debug:false};let experimentAssignments={};const experiments={};let isInitialized=false;const fnvHash=str=>{let h=2166136261;for(let i=0;i<str.length;i++){h^=str.charCodeAt(i);h+=(h<<1)+(h<<4)+(h<<7)+(h<<8)+(h<<24)}return h>>>0};const murmurHash=str=>{const remainder=str.length&3;const bytes=str.length-remainder;let h1=0;const c1=3432918353;const c2=461845907;let i=0;while(i<bytes){let k1=str.charCodeAt(i)&255|(str.charCodeAt(i+1)&255)<<8|(str.charCodeAt(i+2)&255)<<16|(str.charCodeAt(i+3)&255)<<24;i+=4;k1=(k1&65535)*c1+(((k1>>>16)*c1&65535)<<16);k1=k1<<15|k1>>>17;k1=(k1&65535)*c2+(((k1>>>16)*c2&65535)<<16);h1^=k1;h1=h1<<13|h1>>>19;const h1b=(h1&65535)*5+(((h1>>>16)*5&65535)<<16);h1=(h1b&65535)+27492+(((h1b>>>16)+58964&65535)<<16)}let k1=0;switch(remainder){case 3:k1^=(str.charCodeAt(i+2)&255)<<16;case 2:k1^=(str.charCodeAt(i+1)&255)<<8;case 1:k1^=str.charCodeAt(i)&255;k1=(k1&65535)*c1+(((k1>>>16)*c1&65535)<<16);k1=k1<<15|k1>>>17;k1=(k1&65535)*c2+(((k1>>>16)*c2&65535)<<16);h1^=k1}h1^=str.length;h1^=h1>>>16;h1=(h1&65535)*2246822507+(((h1>>>16)*2246822507&65535)<<16);h1^=h1>>>13;h1=(h1&65535)*3266489909+(((h1>>>16)*3266489909&65535)<<16);h1^=h1>>>16;return h1>>>0};const getHashFunction=()=>{if(BeaconExperiments.config.hashFunction==="murmur"){return murmurHash}return fnvHash};const computeHash=str=>{const hashFn=getHashFunction();const hash=hashFn(str);return hash%1e4/1e4};const saveAssignments=()=>{try{const data={assignments:experimentAssignments,expiry:Date.now()+BeaconExperiments.config.storageDuration*24*60*60*1e3};localStorage.setItem(BeaconExperiments.config.storageKey,JSON.stringify(data));if(BeaconExperiments.config.debug){console.log("BeaconExperiments: Saved assignments",experimentAssignments)}}catch(e){if(BeaconExperiments.config.debug){console.error("BeaconExperiments: Error saving assignments",e)}}};const loadAssignments=()=>{try{const data=localStorage.getItem(BeaconExperiments.config.storageKey);if(!data)return{};const parsed=JSON.parse(data);if(parsed.expiry&&parsed.expiry<Date.now()){if(BeaconExperiments.config.debug){console.log("BeaconExperiments: Assignments expired, clearing")}localStorage.removeItem(BeaconExperiments.config.storageKey);return{}}if(BeaconExperiments.config.debug){console.log("BeaconExperiments: Loaded assignments",parsed.assignments)}return parsed.assignments||{}}catch(e){if(BeaconExperiments.config.debug){console.error("BeaconExperiments: Error loading assignments",e)}return{}}};const getExperimentUserId=()=>{if(window.Beacon&&typeof window.Beacon.getUserId==="function"){return window.Beacon.getUserId()}let userId=localStorage.getItem("beacon_experiment_user_id");if(!userId){userId="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(c=>{const r=Math.random()*16|0;const v=c==="x"?r:r&3|8;return v.toString(16)}));localStorage.setItem("beacon_experiment_user_id",userId)}return userId};const assignToVariant=(experimentId,userId,experimentConfig)=>{if(!experimentConfig.active){return null}if(!experimentConfig.variants||!Array.isArray(experimentConfig.variants)||experimentConfig.variants.length===0){return null}if(experimentConfig.targeting&&typeof experimentConfig.targeting==="function"){if(!experimentConfig.targeting()){return null}}const bucketValue=computeHash(`${userId}_${experimentId}`);let cumulativeWeight=0;const totalWeight=experimentConfig.variants.reduce(((sum,variant)=>sum+(variant.weight||1)),0);for(const variant of experimentConfig.variants){const variantWeight=variant.weight||1;const normalizedWeight=variantWeight/totalWeight;cumulativeWeight+=normalizedWeight;if(bucketValue<=cumulativeWeight){return variant.id}}return experimentConfig.variants[0].id};const trackExposure=(experimentId,variantId)=>{if(!window.Beacon){if(BeaconExperiments.config.debug){console.warn("BeaconExperiments: Beacon not available for tracking exposure")}return}window.Beacon.trackEvent({name:"experiment_exposure",category:"experiment",label:experimentId,properties:{experiment_id:experimentId,variant_id:variantId}});if(BeaconExperiments.config.debug){console.log(`BeaconExperiments: Tracked exposure - Experiment: ${experimentId}, Variant: ${variantId}`)}};const getVariant=(experimentId,options={})=>{if(!isInitialized){if(BeaconExperiments.config.debug){console.warn("BeaconExperiments: Not initialized. Call init() first.")}return null}const experimentConfig=experiments[experimentId];if(!experimentConfig){if(BeaconExperiments.config.debug){console.warn(`BeaconExperiments: Experiment "${experimentId}" not found`)}return null}if(experimentAssignments[experimentId]!==undefined){const variantId=experimentAssignments[experimentId];if(options.trackExposure!==false){trackExposure(experimentId,variantId)}return variantId}const userId=getExperimentUserId();const variantId=assignToVariant(experimentId,userId,experimentConfig);if(variantId!==null){experimentAssignments[experimentId]=variantId;saveAssignments();if(options.trackExposure!==false){trackExposure(experimentId,variantId)}}return variantId};const isInVariant=(experimentId,variantId,options={})=>{const assignedVariant=getVariant(experimentId,options);return assignedVariant===variantId};const activate=(experimentId,options={})=>{const variantId=getVariant(experimentId,options);if(!variantId)return false;const experimentConfig=experiments[experimentId];if(!experimentConfig)return false;const variant=experimentConfig.variants.find((v=>v.id===variantId));if(!variant)return false;if(variant.activate&&typeof variant.activate==="function"){variant.activate();if(BeaconExperiments.config.debug){console.log(`BeaconExperiments: Activated experiment "${experimentId}" with variant "${variantId}"`)}return true}return false};const trackConversion=(experimentId,conversionId,value=0,properties={})=>{if(!window.Beacon){if(BeaconExperiments.config.debug){console.warn("BeaconExperiments: Beacon not available for tracking conversion")}return}const variantId=getVariant(experimentId,{trackExposure:false});if(!variantId)return;window.Beacon.trackEvent({name:"experiment_conversion",category:"experiment",label:conversionId,value:value,properties:{...properties,experiment_id:experimentId,variant_id:variantId,conversion_id:conversionId}});if(BeaconExperiments.config.debug){console.log(`BeaconExperiments: Tracked conversion - Experiment: ${experimentId}, Variant: ${variantId}, Conversion: ${conversionId}`)}};const defineExperiments=experimentConfigs=>{if(!Array.isArray(experimentConfigs)){if(BeaconExperiments.config.debug){console.error("BeaconExperiments: defineExperiments requires an array")}return}for(const config of experimentConfigs){if(!config.id){if(BeaconExperiments.config.debug){console.error("BeaconExperiments: Experiment missing ID",config)}return}experiments[config.id]={...config,active:config.active!==false};if(BeaconExperiments.config.debug){console.log(`BeaconExperiments: Defined experiment "${config.id}"`,config)}}};const activateAll=()=>{for(const experimentId in experiments){const experimentConfig=experiments[experimentId];if(experimentConfig.autoActivate===true){activate(experimentId)}}};const resetAssignments=()=>{experimentAssignments={};localStorage.removeItem(BeaconExperiments.config.storageKey);if(BeaconExperiments.config.debug){console.log("BeaconExperiments: Reset all assignments")}};const forceVariant=(experimentId,variantId)=>{experimentAssignments[experimentId]=variantId;saveAssignments();if(BeaconExperiments.config.debug){console.log(`BeaconExperiments: Forced variant "${variantId}" for experiment "${experimentId}"`)}};const BeaconExperiments={version:"1.0.0",config:{...defaultConfig},init:function(customConfig={}){this.config={...this.config,...customConfig};experimentAssignments=loadAssignments();isInitialized=true;if(this.config.debug){console.log("BeaconExperiments: Initialized with config",this.config)}return this},defineExperiments:defineExperiments,activate:activate,activateAll:activateAll,getVariant:getVariant,isInVariant:isInVariant,trackConversion:trackConversion,resetAssignments:resetAssignments,forceVariant:forceVariant,getUserId:getExperimentUserId};window.BeaconExperiments=BeaconExperiments})(window);